
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model credential
 */

export type credential = {
  id: number
  login: string
  password: string
  role: string
  userId: number
}

/**
 * Model user
 */

export type user = {
  id: number
  name: string
  email: string
}

/**
 * Model grade
 */

export type grade = {
  id: number
  symbol: string
}

/**
 * Model plan
 */

export type plan = {
  id: number
  jsonPlan: Prisma.JsonValue
  gradeId: number
}

/**
 * Model lesson
 */

export type lesson = {
  id: number
  name: string
  room: string
}

/**
 * Model hours
 */

export type hours = {
  id: number
  from: string
  to: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Credentials
 * const credentials = await prisma.credential.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Credentials
   * const credentials = await prisma.credential.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.credential`: Exposes CRUD operations for the **credential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credentials
    * const credentials = await prisma.credential.findMany()
    * ```
    */
  get credential(): Prisma.credentialDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.gradeDelegate<GlobalReject>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.planDelegate<GlobalReject>;

  /**
   * `prisma.lesson`: Exposes CRUD operations for the **lesson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lesson.findMany()
    * ```
    */
  get lesson(): Prisma.lessonDelegate<GlobalReject>;

  /**
   * `prisma.hours`: Exposes CRUD operations for the **hours** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hours
    * const hours = await prisma.hours.findMany()
    * ```
    */
  get hours(): Prisma.hoursDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.19.0
   * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    credential: 'credential',
    user: 'user',
    grade: 'grade',
    plan: 'plan',
    lesson: 'lesson',
    hours: 'hours'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model credential
   */


  export type AggregateCredential = {
    count: CredentialCountAggregateOutputType | null
    avg: CredentialAvgAggregateOutputType | null
    sum: CredentialSumAggregateOutputType | null
    min: CredentialMinAggregateOutputType | null
    max: CredentialMaxAggregateOutputType | null
  }

  export type CredentialAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type CredentialSumAggregateOutputType = {
    id: number
    userId: number
  }

  export type CredentialMinAggregateOutputType = {
    id: number
    login: string | null
    password: string | null
    role: string | null
    userId: number
  }

  export type CredentialMaxAggregateOutputType = {
    id: number
    login: string | null
    password: string | null
    role: string | null
    userId: number
  }

  export type CredentialCountAggregateOutputType = {
    id: number
    login: number | null
    password: number | null
    role: number | null
    userId: number
    _all: number
  }


  export type CredentialAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CredentialSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CredentialMinAggregateInputType = {
    id?: true
    login?: true
    password?: true
    role?: true
    userId?: true
  }

  export type CredentialMaxAggregateInputType = {
    id?: true
    login?: true
    password?: true
    role?: true
    userId?: true
  }

  export type CredentialCountAggregateInputType = {
    id?: true
    login?: true
    password?: true
    role?: true
    userId?: true
    _all?: true
  }

  export type CredentialAggregateArgs = {
    /**
     * Filter which credential to aggregate.
    **/
    where?: credentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credentials to fetch.
    **/
    orderBy?: Enumerable<credentialOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: credentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credentials from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credentials.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned credentials
    **/
    count?: true | CredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CredentialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CredentialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CredentialMaxAggregateInputType
  }

  export type GetCredentialAggregateType<T extends CredentialAggregateArgs> = {
    [P in keyof T & keyof AggregateCredential]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredential[P]>
      : GetScalarType<T[P], AggregateCredential[P]>
  }



  export type credentialSelect = {
    id?: boolean
    login?: boolean
    password?: boolean
    role?: boolean
    userId?: boolean
    user?: boolean | userArgs
  }

  export type credentialInclude = {
    user?: boolean | userArgs
  }

  export type credentialGetPayload<
    S extends boolean | null | undefined | credentialArgs,
    U = keyof S
      > = S extends true
        ? credential
    : S extends undefined
    ? never
    : S extends credentialArgs | credentialFindManyArgs
    ?'include' extends U
    ? credential  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? userGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof credential ?credential [P]
  : 
          P extends 'user'
        ? userGetPayload<S['select'][P]> : never
  } 
    : credential
  : credential


  type credentialCountArgs = Merge<
    Omit<credentialFindManyArgs, 'select' | 'include'> & {
      select?: CredentialCountAggregateInputType | true
    }
  >

  export interface credentialDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Credential that matches the filter.
     * @param {credentialFindUniqueArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends credentialFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, credentialFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'credential'> extends True ? CheckSelect<T, Prisma__credentialClient<credential>, Prisma__credentialClient<credentialGetPayload<T>>> : CheckSelect<T, Prisma__credentialClient<credential | null >, Prisma__credentialClient<credentialGetPayload<T> | null >>

    /**
     * Find the first Credential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialFindFirstArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends credentialFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, credentialFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'credential'> extends True ? CheckSelect<T, Prisma__credentialClient<credential>, Prisma__credentialClient<credentialGetPayload<T>>> : CheckSelect<T, Prisma__credentialClient<credential | null >, Prisma__credentialClient<credentialGetPayload<T> | null >>

    /**
     * Find zero or more Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credentials
     * const credentials = await prisma.credential.findMany()
     * 
     * // Get first 10 Credentials
     * const credentials = await prisma.credential.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const credentialWithIdOnly = await prisma.credential.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends credentialFindManyArgs>(
      args?: SelectSubset<T, credentialFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<credential>>, PrismaPromise<Array<credentialGetPayload<T>>>>

    /**
     * Create a Credential.
     * @param {credentialCreateArgs} args - Arguments to create a Credential.
     * @example
     * // Create one Credential
     * const Credential = await prisma.credential.create({
     *   data: {
     *     // ... data to create a Credential
     *   }
     * })
     * 
    **/
    create<T extends credentialCreateArgs>(
      args: SelectSubset<T, credentialCreateArgs>
    ): CheckSelect<T, Prisma__credentialClient<credential>, Prisma__credentialClient<credentialGetPayload<T>>>

    /**
     * Delete a Credential.
     * @param {credentialDeleteArgs} args - Arguments to delete one Credential.
     * @example
     * // Delete one Credential
     * const Credential = await prisma.credential.delete({
     *   where: {
     *     // ... filter to delete one Credential
     *   }
     * })
     * 
    **/
    delete<T extends credentialDeleteArgs>(
      args: SelectSubset<T, credentialDeleteArgs>
    ): CheckSelect<T, Prisma__credentialClient<credential>, Prisma__credentialClient<credentialGetPayload<T>>>

    /**
     * Update one Credential.
     * @param {credentialUpdateArgs} args - Arguments to update one Credential.
     * @example
     * // Update one Credential
     * const credential = await prisma.credential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends credentialUpdateArgs>(
      args: SelectSubset<T, credentialUpdateArgs>
    ): CheckSelect<T, Prisma__credentialClient<credential>, Prisma__credentialClient<credentialGetPayload<T>>>

    /**
     * Delete zero or more Credentials.
     * @param {credentialDeleteManyArgs} args - Arguments to filter Credentials to delete.
     * @example
     * // Delete a few Credentials
     * const { count } = await prisma.credential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends credentialDeleteManyArgs>(
      args?: SelectSubset<T, credentialDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credentials
     * const credential = await prisma.credential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends credentialUpdateManyArgs>(
      args: SelectSubset<T, credentialUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Credential.
     * @param {credentialUpsertArgs} args - Arguments to update or create a Credential.
     * @example
     * // Update or create a Credential
     * const credential = await prisma.credential.upsert({
     *   create: {
     *     // ... data to create a Credential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credential we want to update
     *   }
     * })
    **/
    upsert<T extends credentialUpsertArgs>(
      args: SelectSubset<T, credentialUpsertArgs>
    ): CheckSelect<T, Prisma__credentialClient<credential>, Prisma__credentialClient<credentialGetPayload<T>>>

    /**
     * Count the number of Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credentialCountArgs} args - Arguments to filter Credentials to count.
     * @example
     * // Count the number of Credentials
     * const count = await prisma.credential.count({
     *   where: {
     *     // ... the filter for the Credentials we want to count
     *   }
     * })
    **/
    count<T extends credentialCountArgs>(
      args?: Subset<T, credentialCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredentialAggregateArgs>(args: Subset<T, CredentialAggregateArgs>): PrismaPromise<GetCredentialAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for credential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__credentialClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * credential findUnique
   */
  export type credentialFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
    /**
     * Throw an Error if a credential can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which credential to fetch.
    **/
    where: credentialWhereUniqueInput
  }


  /**
   * credential findFirst
   */
  export type credentialFindFirstArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
    /**
     * Throw an Error if a credential can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which credential to fetch.
    **/
    where?: credentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credentials to fetch.
    **/
    orderBy?: Enumerable<credentialOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for credentials.
    **/
    cursor?: credentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credentials from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credentials.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of credentials.
    **/
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }


  /**
   * credential findMany
   */
  export type credentialFindManyArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
    /**
     * Filter, which credentials to fetch.
    **/
    where?: credentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credentials to fetch.
    **/
    orderBy?: Enumerable<credentialOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing credentials.
    **/
    cursor?: credentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credentials from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credentials.
    **/
    skip?: number
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }


  /**
   * credential create
   */
  export type credentialCreateArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
    /**
     * The data needed to create a credential.
    **/
    data: XOR<credentialCreateInput, credentialUncheckedCreateInput>
  }


  /**
   * credential update
   */
  export type credentialUpdateArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
    /**
     * The data needed to update a credential.
    **/
    data: XOR<credentialUpdateInput, credentialUncheckedUpdateInput>
    /**
     * Choose, which credential to update.
    **/
    where: credentialWhereUniqueInput
  }


  /**
   * credential updateMany
   */
  export type credentialUpdateManyArgs = {
    data: XOR<credentialUpdateManyMutationInput, credentialUncheckedUpdateManyInput>
    where?: credentialWhereInput
  }


  /**
   * credential upsert
   */
  export type credentialUpsertArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
    /**
     * The filter to search for the credential to update in case it exists.
    **/
    where: credentialWhereUniqueInput
    /**
     * In case the credential found by the `where` argument doesn't exist, create a new credential with this data.
    **/
    create: XOR<credentialCreateInput, credentialUncheckedCreateInput>
    /**
     * In case the credential was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<credentialUpdateInput, credentialUncheckedUpdateInput>
  }


  /**
   * credential delete
   */
  export type credentialDeleteArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
    /**
     * Filter which credential to delete.
    **/
    where: credentialWhereUniqueInput
  }


  /**
   * credential deleteMany
   */
  export type credentialDeleteManyArgs = {
    where?: credentialWhereInput
  }


  /**
   * credential without action
   */
  export type credentialArgs = {
    /**
     * Select specific fields to fetch from the credential
    **/
    select?: credentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: credentialInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number | null
    email: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type userSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    credential?: boolean | credentialArgs
    grade?: boolean | gradeFindManyArgs
  }

  export type userInclude = {
    credential?: boolean | credentialArgs
    grade?: boolean | gradeFindManyArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'credential'
        ? credentialGetPayload<S['include'][P]> | null :
        P extends 'grade'
        ? Array < gradeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user ?user [P]
  : 
          P extends 'credential'
        ? credentialGetPayload<S['select'][P]> | null :
        P extends 'grade'
        ? Array < gradeGetPayload<S['select'][P]>>  : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    credential<T extends credentialArgs = {}>(args?: Subset<T, credentialArgs>): CheckSelect<T, Prisma__credentialClient<credential | null >, Prisma__credentialClient<credentialGetPayload<T> | null >>;

    grade<T extends gradeFindManyArgs = {}>(args?: Subset<T, gradeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<grade>>, PrismaPromise<Array<gradeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: userInclude | null
  }



  /**
   * Model grade
   */


  export type AggregateGrade = {
    count: GradeCountAggregateOutputType | null
    avg: GradeAvgAggregateOutputType | null
    sum: GradeSumAggregateOutputType | null
    min: GradeMinAggregateOutputType | null
    max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    id: number
  }

  export type GradeSumAggregateOutputType = {
    id: number
  }

  export type GradeMinAggregateOutputType = {
    id: number
    symbol: string | null
  }

  export type GradeMaxAggregateOutputType = {
    id: number
    symbol: string | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    symbol: number | null
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    id?: true
  }

  export type GradeSumAggregateInputType = {
    id?: true
  }

  export type GradeMinAggregateInputType = {
    id?: true
    symbol?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    symbol?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    symbol?: true
    _all?: true
  }

  export type GradeAggregateArgs = {
    /**
     * Filter which grade to aggregate.
    **/
    where?: gradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grades to fetch.
    **/
    orderBy?: Enumerable<gradeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: gradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grades from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grades.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned grades
    **/
    count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
    [P in keyof T & keyof AggregateGrade]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }



  export type gradeSelect = {
    id?: boolean
    symbol?: boolean
    user?: boolean | userFindManyArgs
    plan?: boolean | planArgs
  }

  export type gradeInclude = {
    user?: boolean | userFindManyArgs
    plan?: boolean | planArgs
  }

  export type gradeGetPayload<
    S extends boolean | null | undefined | gradeArgs,
    U = keyof S
      > = S extends true
        ? grade
    : S extends undefined
    ? never
    : S extends gradeArgs | gradeFindManyArgs
    ?'include' extends U
    ? grade  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? Array < userGetPayload<S['include'][P]>>  :
        P extends 'plan'
        ? planGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof grade ?grade [P]
  : 
          P extends 'user'
        ? Array < userGetPayload<S['select'][P]>>  :
        P extends 'plan'
        ? planGetPayload<S['select'][P]> | null : never
  } 
    : grade
  : grade


  type gradeCountArgs = Merge<
    Omit<gradeFindManyArgs, 'select' | 'include'> & {
      select?: GradeCountAggregateInputType | true
    }
  >

  export interface gradeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Grade that matches the filter.
     * @param {gradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends gradeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, gradeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'grade'> extends True ? CheckSelect<T, Prisma__gradeClient<grade>, Prisma__gradeClient<gradeGetPayload<T>>> : CheckSelect<T, Prisma__gradeClient<grade | null >, Prisma__gradeClient<gradeGetPayload<T> | null >>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends gradeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, gradeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'grade'> extends True ? CheckSelect<T, Prisma__gradeClient<grade>, Prisma__gradeClient<gradeGetPayload<T>>> : CheckSelect<T, Prisma__gradeClient<grade | null >, Prisma__gradeClient<gradeGetPayload<T> | null >>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends gradeFindManyArgs>(
      args?: SelectSubset<T, gradeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<grade>>, PrismaPromise<Array<gradeGetPayload<T>>>>

    /**
     * Create a Grade.
     * @param {gradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
    **/
    create<T extends gradeCreateArgs>(
      args: SelectSubset<T, gradeCreateArgs>
    ): CheckSelect<T, Prisma__gradeClient<grade>, Prisma__gradeClient<gradeGetPayload<T>>>

    /**
     * Delete a Grade.
     * @param {gradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
    **/
    delete<T extends gradeDeleteArgs>(
      args: SelectSubset<T, gradeDeleteArgs>
    ): CheckSelect<T, Prisma__gradeClient<grade>, Prisma__gradeClient<gradeGetPayload<T>>>

    /**
     * Update one Grade.
     * @param {gradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends gradeUpdateArgs>(
      args: SelectSubset<T, gradeUpdateArgs>
    ): CheckSelect<T, Prisma__gradeClient<grade>, Prisma__gradeClient<gradeGetPayload<T>>>

    /**
     * Delete zero or more Grades.
     * @param {gradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends gradeDeleteManyArgs>(
      args?: SelectSubset<T, gradeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends gradeUpdateManyArgs>(
      args: SelectSubset<T, gradeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Grade.
     * @param {gradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
    **/
    upsert<T extends gradeUpsertArgs>(
      args: SelectSubset<T, gradeUpsertArgs>
    ): CheckSelect<T, Prisma__gradeClient<grade>, Prisma__gradeClient<gradeGetPayload<T>>>

    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends gradeCountArgs>(
      args?: Subset<T, gradeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): PrismaPromise<GetGradeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__gradeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userFindManyArgs = {}>(args?: Subset<T, userFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>;

    plan<T extends planArgs = {}>(args?: Subset<T, planArgs>): CheckSelect<T, Prisma__planClient<plan | null >, Prisma__planClient<planGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * grade findUnique
   */
  export type gradeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
    /**
     * Throw an Error if a grade can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which grade to fetch.
    **/
    where: gradeWhereUniqueInput
  }


  /**
   * grade findFirst
   */
  export type gradeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
    /**
     * Throw an Error if a grade can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which grade to fetch.
    **/
    where?: gradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grades to fetch.
    **/
    orderBy?: Enumerable<gradeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for grades.
    **/
    cursor?: gradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grades from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grades.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of grades.
    **/
    distinct?: Enumerable<GradeScalarFieldEnum>
  }


  /**
   * grade findMany
   */
  export type gradeFindManyArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
    /**
     * Filter, which grades to fetch.
    **/
    where?: gradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of grades to fetch.
    **/
    orderBy?: Enumerable<gradeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing grades.
    **/
    cursor?: gradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` grades from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` grades.
    **/
    skip?: number
    distinct?: Enumerable<GradeScalarFieldEnum>
  }


  /**
   * grade create
   */
  export type gradeCreateArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
    /**
     * The data needed to create a grade.
    **/
    data: XOR<gradeCreateInput, gradeUncheckedCreateInput>
  }


  /**
   * grade update
   */
  export type gradeUpdateArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
    /**
     * The data needed to update a grade.
    **/
    data: XOR<gradeUpdateInput, gradeUncheckedUpdateInput>
    /**
     * Choose, which grade to update.
    **/
    where: gradeWhereUniqueInput
  }


  /**
   * grade updateMany
   */
  export type gradeUpdateManyArgs = {
    data: XOR<gradeUpdateManyMutationInput, gradeUncheckedUpdateManyInput>
    where?: gradeWhereInput
  }


  /**
   * grade upsert
   */
  export type gradeUpsertArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
    /**
     * The filter to search for the grade to update in case it exists.
    **/
    where: gradeWhereUniqueInput
    /**
     * In case the grade found by the `where` argument doesn't exist, create a new grade with this data.
    **/
    create: XOR<gradeCreateInput, gradeUncheckedCreateInput>
    /**
     * In case the grade was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<gradeUpdateInput, gradeUncheckedUpdateInput>
  }


  /**
   * grade delete
   */
  export type gradeDeleteArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
    /**
     * Filter which grade to delete.
    **/
    where: gradeWhereUniqueInput
  }


  /**
   * grade deleteMany
   */
  export type gradeDeleteManyArgs = {
    where?: gradeWhereInput
  }


  /**
   * grade without action
   */
  export type gradeArgs = {
    /**
     * Select specific fields to fetch from the grade
    **/
    select?: gradeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: gradeInclude | null
  }



  /**
   * Model plan
   */


  export type AggregatePlan = {
    count: PlanCountAggregateOutputType | null
    avg: PlanAvgAggregateOutputType | null
    sum: PlanSumAggregateOutputType | null
    min: PlanMinAggregateOutputType | null
    max: PlanMaxAggregateOutputType | null
  }

  export type PlanAvgAggregateOutputType = {
    id: number
    gradeId: number
  }

  export type PlanSumAggregateOutputType = {
    id: number
    gradeId: number
  }

  export type PlanMinAggregateOutputType = {
    id: number
    gradeId: number
  }

  export type PlanMaxAggregateOutputType = {
    id: number
    gradeId: number
  }

  export type PlanCountAggregateOutputType = {
    id: number
    jsonPlan: number | null
    gradeId: number
    _all: number
  }


  export type PlanAvgAggregateInputType = {
    id?: true
    gradeId?: true
  }

  export type PlanSumAggregateInputType = {
    id?: true
    gradeId?: true
  }

  export type PlanMinAggregateInputType = {
    id?: true
    gradeId?: true
  }

  export type PlanMaxAggregateInputType = {
    id?: true
    gradeId?: true
  }

  export type PlanCountAggregateInputType = {
    id?: true
    jsonPlan?: true
    gradeId?: true
    _all?: true
  }

  export type PlanAggregateArgs = {
    /**
     * Filter which plan to aggregate.
    **/
    where?: planWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plans to fetch.
    **/
    orderBy?: Enumerable<planOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: planWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plans from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plans.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned plans
    **/
    count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
    [P in keyof T & keyof AggregatePlan]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }



  export type planSelect = {
    id?: boolean
    grade?: boolean | gradeArgs
    jsonPlan?: boolean
    gradeId?: boolean
  }

  export type planInclude = {
    grade?: boolean | gradeArgs
  }

  export type planGetPayload<
    S extends boolean | null | undefined | planArgs,
    U = keyof S
      > = S extends true
        ? plan
    : S extends undefined
    ? never
    : S extends planArgs | planFindManyArgs
    ?'include' extends U
    ? plan  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'grade'
        ? gradeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof plan ?plan [P]
  : 
          P extends 'grade'
        ? gradeGetPayload<S['select'][P]> : never
  } 
    : plan
  : plan


  type planCountArgs = Merge<
    Omit<planFindManyArgs, 'select' | 'include'> & {
      select?: PlanCountAggregateInputType | true
    }
  >

  export interface planDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Plan that matches the filter.
     * @param {planFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends planFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, planFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'plan'> extends True ? CheckSelect<T, Prisma__planClient<plan>, Prisma__planClient<planGetPayload<T>>> : CheckSelect<T, Prisma__planClient<plan | null >, Prisma__planClient<planGetPayload<T> | null >>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {planFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends planFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, planFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'plan'> extends True ? CheckSelect<T, Prisma__planClient<plan>, Prisma__planClient<planGetPayload<T>>> : CheckSelect<T, Prisma__planClient<plan | null >, Prisma__planClient<planGetPayload<T> | null >>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {planFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planWithIdOnly = await prisma.plan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends planFindManyArgs>(
      args?: SelectSubset<T, planFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<plan>>, PrismaPromise<Array<planGetPayload<T>>>>

    /**
     * Create a Plan.
     * @param {planCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
    **/
    create<T extends planCreateArgs>(
      args: SelectSubset<T, planCreateArgs>
    ): CheckSelect<T, Prisma__planClient<plan>, Prisma__planClient<planGetPayload<T>>>

    /**
     * Delete a Plan.
     * @param {planDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
    **/
    delete<T extends planDeleteArgs>(
      args: SelectSubset<T, planDeleteArgs>
    ): CheckSelect<T, Prisma__planClient<plan>, Prisma__planClient<planGetPayload<T>>>

    /**
     * Update one Plan.
     * @param {planUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends planUpdateArgs>(
      args: SelectSubset<T, planUpdateArgs>
    ): CheckSelect<T, Prisma__planClient<plan>, Prisma__planClient<planGetPayload<T>>>

    /**
     * Delete zero or more Plans.
     * @param {planDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends planDeleteManyArgs>(
      args?: SelectSubset<T, planDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {planUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends planUpdateManyArgs>(
      args: SelectSubset<T, planUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Plan.
     * @param {planUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
    **/
    upsert<T extends planUpsertArgs>(
      args: SelectSubset<T, planUpsertArgs>
    ): CheckSelect<T, Prisma__planClient<plan>, Prisma__planClient<planGetPayload<T>>>

    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {planCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends planCountArgs>(
      args?: Subset<T, planCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): PrismaPromise<GetPlanAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__planClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    grade<T extends gradeArgs = {}>(args?: Subset<T, gradeArgs>): CheckSelect<T, Prisma__gradeClient<grade | null >, Prisma__gradeClient<gradeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * plan findUnique
   */
  export type planFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
    /**
     * Throw an Error if a plan can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which plan to fetch.
    **/
    where: planWhereUniqueInput
  }


  /**
   * plan findFirst
   */
  export type planFindFirstArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
    /**
     * Throw an Error if a plan can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which plan to fetch.
    **/
    where?: planWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plans to fetch.
    **/
    orderBy?: Enumerable<planOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for plans.
    **/
    cursor?: planWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plans from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plans.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of plans.
    **/
    distinct?: Enumerable<PlanScalarFieldEnum>
  }


  /**
   * plan findMany
   */
  export type planFindManyArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
    /**
     * Filter, which plans to fetch.
    **/
    where?: planWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plans to fetch.
    **/
    orderBy?: Enumerable<planOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing plans.
    **/
    cursor?: planWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plans from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plans.
    **/
    skip?: number
    distinct?: Enumerable<PlanScalarFieldEnum>
  }


  /**
   * plan create
   */
  export type planCreateArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
    /**
     * The data needed to create a plan.
    **/
    data: XOR<planCreateInput, planUncheckedCreateInput>
  }


  /**
   * plan update
   */
  export type planUpdateArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
    /**
     * The data needed to update a plan.
    **/
    data: XOR<planUpdateInput, planUncheckedUpdateInput>
    /**
     * Choose, which plan to update.
    **/
    where: planWhereUniqueInput
  }


  /**
   * plan updateMany
   */
  export type planUpdateManyArgs = {
    data: XOR<planUpdateManyMutationInput, planUncheckedUpdateManyInput>
    where?: planWhereInput
  }


  /**
   * plan upsert
   */
  export type planUpsertArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
    /**
     * The filter to search for the plan to update in case it exists.
    **/
    where: planWhereUniqueInput
    /**
     * In case the plan found by the `where` argument doesn't exist, create a new plan with this data.
    **/
    create: XOR<planCreateInput, planUncheckedCreateInput>
    /**
     * In case the plan was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<planUpdateInput, planUncheckedUpdateInput>
  }


  /**
   * plan delete
   */
  export type planDeleteArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
    /**
     * Filter which plan to delete.
    **/
    where: planWhereUniqueInput
  }


  /**
   * plan deleteMany
   */
  export type planDeleteManyArgs = {
    where?: planWhereInput
  }


  /**
   * plan without action
   */
  export type planArgs = {
    /**
     * Select specific fields to fetch from the plan
    **/
    select?: planSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: planInclude | null
  }



  /**
   * Model lesson
   */


  export type AggregateLesson = {
    count: LessonCountAggregateOutputType | null
    avg: LessonAvgAggregateOutputType | null
    sum: LessonSumAggregateOutputType | null
    min: LessonMinAggregateOutputType | null
    max: LessonMaxAggregateOutputType | null
  }

  export type LessonAvgAggregateOutputType = {
    id: number
  }

  export type LessonSumAggregateOutputType = {
    id: number
  }

  export type LessonMinAggregateOutputType = {
    id: number
    name: string | null
    room: string | null
  }

  export type LessonMaxAggregateOutputType = {
    id: number
    name: string | null
    room: string | null
  }

  export type LessonCountAggregateOutputType = {
    id: number
    name: number | null
    room: number | null
    _all: number
  }


  export type LessonAvgAggregateInputType = {
    id?: true
  }

  export type LessonSumAggregateInputType = {
    id?: true
  }

  export type LessonMinAggregateInputType = {
    id?: true
    name?: true
    room?: true
  }

  export type LessonMaxAggregateInputType = {
    id?: true
    name?: true
    room?: true
  }

  export type LessonCountAggregateInputType = {
    id?: true
    name?: true
    room?: true
    _all?: true
  }

  export type LessonAggregateArgs = {
    /**
     * Filter which lesson to aggregate.
    **/
    where?: lessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
    **/
    orderBy?: Enumerable<lessonOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: lessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lessons
    **/
    count?: true | LessonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LessonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LessonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LessonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LessonMaxAggregateInputType
  }

  export type GetLessonAggregateType<T extends LessonAggregateArgs> = {
    [P in keyof T & keyof AggregateLesson]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLesson[P]>
      : GetScalarType<T[P], AggregateLesson[P]>
  }



  export type lessonSelect = {
    id?: boolean
    name?: boolean
    room?: boolean
  }

  export type lessonGetPayload<
    S extends boolean | null | undefined | lessonArgs,
    U = keyof S
      > = S extends true
        ? lesson
    : S extends undefined
    ? never
    : S extends lessonArgs | lessonFindManyArgs
    ?'include' extends U
    ? lesson 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof lesson ?lesson [P]
  : 
     never
  } 
    : lesson
  : lesson


  type lessonCountArgs = Merge<
    Omit<lessonFindManyArgs, 'select' | 'include'> & {
      select?: LessonCountAggregateInputType | true
    }
  >

  export interface lessonDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Lesson that matches the filter.
     * @param {lessonFindUniqueArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends lessonFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, lessonFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'lesson'> extends True ? CheckSelect<T, Prisma__lessonClient<lesson>, Prisma__lessonClient<lessonGetPayload<T>>> : CheckSelect<T, Prisma__lessonClient<lesson | null >, Prisma__lessonClient<lessonGetPayload<T> | null >>

    /**
     * Find the first Lesson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonFindFirstArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends lessonFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, lessonFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'lesson'> extends True ? CheckSelect<T, Prisma__lessonClient<lesson>, Prisma__lessonClient<lessonGetPayload<T>>> : CheckSelect<T, Prisma__lessonClient<lesson | null >, Prisma__lessonClient<lessonGetPayload<T> | null >>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lesson.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lesson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonWithIdOnly = await prisma.lesson.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends lessonFindManyArgs>(
      args?: SelectSubset<T, lessonFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<lesson>>, PrismaPromise<Array<lessonGetPayload<T>>>>

    /**
     * Create a Lesson.
     * @param {lessonCreateArgs} args - Arguments to create a Lesson.
     * @example
     * // Create one Lesson
     * const Lesson = await prisma.lesson.create({
     *   data: {
     *     // ... data to create a Lesson
     *   }
     * })
     * 
    **/
    create<T extends lessonCreateArgs>(
      args: SelectSubset<T, lessonCreateArgs>
    ): CheckSelect<T, Prisma__lessonClient<lesson>, Prisma__lessonClient<lessonGetPayload<T>>>

    /**
     * Delete a Lesson.
     * @param {lessonDeleteArgs} args - Arguments to delete one Lesson.
     * @example
     * // Delete one Lesson
     * const Lesson = await prisma.lesson.delete({
     *   where: {
     *     // ... filter to delete one Lesson
     *   }
     * })
     * 
    **/
    delete<T extends lessonDeleteArgs>(
      args: SelectSubset<T, lessonDeleteArgs>
    ): CheckSelect<T, Prisma__lessonClient<lesson>, Prisma__lessonClient<lessonGetPayload<T>>>

    /**
     * Update one Lesson.
     * @param {lessonUpdateArgs} args - Arguments to update one Lesson.
     * @example
     * // Update one Lesson
     * const lesson = await prisma.lesson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends lessonUpdateArgs>(
      args: SelectSubset<T, lessonUpdateArgs>
    ): CheckSelect<T, Prisma__lessonClient<lesson>, Prisma__lessonClient<lessonGetPayload<T>>>

    /**
     * Delete zero or more Lessons.
     * @param {lessonDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lesson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends lessonDeleteManyArgs>(
      args?: SelectSubset<T, lessonDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lesson = await prisma.lesson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends lessonUpdateManyArgs>(
      args: SelectSubset<T, lessonUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Lesson.
     * @param {lessonUpsertArgs} args - Arguments to update or create a Lesson.
     * @example
     * // Update or create a Lesson
     * const lesson = await prisma.lesson.upsert({
     *   create: {
     *     // ... data to create a Lesson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lesson we want to update
     *   }
     * })
    **/
    upsert<T extends lessonUpsertArgs>(
      args: SelectSubset<T, lessonUpsertArgs>
    ): CheckSelect<T, Prisma__lessonClient<lesson>, Prisma__lessonClient<lessonGetPayload<T>>>

    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lesson.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends lessonCountArgs>(
      args?: Subset<T, lessonCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lesson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonAggregateArgs>(args: Subset<T, LessonAggregateArgs>): PrismaPromise<GetLessonAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for lesson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__lessonClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * lesson findUnique
   */
  export type lessonFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
    /**
     * Throw an Error if a lesson can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which lesson to fetch.
    **/
    where: lessonWhereUniqueInput
  }


  /**
   * lesson findFirst
   */
  export type lessonFindFirstArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
    /**
     * Throw an Error if a lesson can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which lesson to fetch.
    **/
    where?: lessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
    **/
    orderBy?: Enumerable<lessonOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lessons.
    **/
    cursor?: lessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lessons.
    **/
    distinct?: Enumerable<LessonScalarFieldEnum>
  }


  /**
   * lesson findMany
   */
  export type lessonFindManyArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
    /**
     * Filter, which lessons to fetch.
    **/
    where?: lessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
    **/
    orderBy?: Enumerable<lessonOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lessons.
    **/
    cursor?: lessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
    **/
    skip?: number
    distinct?: Enumerable<LessonScalarFieldEnum>
  }


  /**
   * lesson create
   */
  export type lessonCreateArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
    /**
     * The data needed to create a lesson.
    **/
    data: XOR<lessonCreateInput, lessonUncheckedCreateInput>
  }


  /**
   * lesson update
   */
  export type lessonUpdateArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
    /**
     * The data needed to update a lesson.
    **/
    data: XOR<lessonUpdateInput, lessonUncheckedUpdateInput>
    /**
     * Choose, which lesson to update.
    **/
    where: lessonWhereUniqueInput
  }


  /**
   * lesson updateMany
   */
  export type lessonUpdateManyArgs = {
    data: XOR<lessonUpdateManyMutationInput, lessonUncheckedUpdateManyInput>
    where?: lessonWhereInput
  }


  /**
   * lesson upsert
   */
  export type lessonUpsertArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
    /**
     * The filter to search for the lesson to update in case it exists.
    **/
    where: lessonWhereUniqueInput
    /**
     * In case the lesson found by the `where` argument doesn't exist, create a new lesson with this data.
    **/
    create: XOR<lessonCreateInput, lessonUncheckedCreateInput>
    /**
     * In case the lesson was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<lessonUpdateInput, lessonUncheckedUpdateInput>
  }


  /**
   * lesson delete
   */
  export type lessonDeleteArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
    /**
     * Filter which lesson to delete.
    **/
    where: lessonWhereUniqueInput
  }


  /**
   * lesson deleteMany
   */
  export type lessonDeleteManyArgs = {
    where?: lessonWhereInput
  }


  /**
   * lesson without action
   */
  export type lessonArgs = {
    /**
     * Select specific fields to fetch from the lesson
    **/
    select?: lessonSelect | null
  }



  /**
   * Model hours
   */


  export type AggregateHours = {
    count: HoursCountAggregateOutputType | null
    avg: HoursAvgAggregateOutputType | null
    sum: HoursSumAggregateOutputType | null
    min: HoursMinAggregateOutputType | null
    max: HoursMaxAggregateOutputType | null
  }

  export type HoursAvgAggregateOutputType = {
    id: number
  }

  export type HoursSumAggregateOutputType = {
    id: number
  }

  export type HoursMinAggregateOutputType = {
    id: number
    from: string | null
    to: string | null
  }

  export type HoursMaxAggregateOutputType = {
    id: number
    from: string | null
    to: string | null
  }

  export type HoursCountAggregateOutputType = {
    id: number
    from: number | null
    to: number | null
    _all: number
  }


  export type HoursAvgAggregateInputType = {
    id?: true
  }

  export type HoursSumAggregateInputType = {
    id?: true
  }

  export type HoursMinAggregateInputType = {
    id?: true
    from?: true
    to?: true
  }

  export type HoursMaxAggregateInputType = {
    id?: true
    from?: true
    to?: true
  }

  export type HoursCountAggregateInputType = {
    id?: true
    from?: true
    to?: true
    _all?: true
  }

  export type HoursAggregateArgs = {
    /**
     * Filter which hours to aggregate.
    **/
    where?: hoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hours to fetch.
    **/
    orderBy?: Enumerable<hoursOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: hoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hours from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hours.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hours
    **/
    count?: true | HoursCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: HoursAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: HoursSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: HoursMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: HoursMaxAggregateInputType
  }

  export type GetHoursAggregateType<T extends HoursAggregateArgs> = {
    [P in keyof T & keyof AggregateHours]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHours[P]>
      : GetScalarType<T[P], AggregateHours[P]>
  }



  export type hoursSelect = {
    id?: boolean
    from?: boolean
    to?: boolean
  }

  export type hoursGetPayload<
    S extends boolean | null | undefined | hoursArgs,
    U = keyof S
      > = S extends true
        ? hours
    : S extends undefined
    ? never
    : S extends hoursArgs | hoursFindManyArgs
    ?'include' extends U
    ? hours 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof hours ?hours [P]
  : 
     never
  } 
    : hours
  : hours


  type hoursCountArgs = Merge<
    Omit<hoursFindManyArgs, 'select' | 'include'> & {
      select?: HoursCountAggregateInputType | true
    }
  >

  export interface hoursDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Hours that matches the filter.
     * @param {hoursFindUniqueArgs} args - Arguments to find a Hours
     * @example
     * // Get one Hours
     * const hours = await prisma.hours.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends hoursFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, hoursFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'hours'> extends True ? CheckSelect<T, Prisma__hoursClient<hours>, Prisma__hoursClient<hoursGetPayload<T>>> : CheckSelect<T, Prisma__hoursClient<hours | null >, Prisma__hoursClient<hoursGetPayload<T> | null >>

    /**
     * Find the first Hours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hoursFindFirstArgs} args - Arguments to find a Hours
     * @example
     * // Get one Hours
     * const hours = await prisma.hours.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends hoursFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, hoursFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'hours'> extends True ? CheckSelect<T, Prisma__hoursClient<hours>, Prisma__hoursClient<hoursGetPayload<T>>> : CheckSelect<T, Prisma__hoursClient<hours | null >, Prisma__hoursClient<hoursGetPayload<T> | null >>

    /**
     * Find zero or more Hours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hoursFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hours
     * const hours = await prisma.hours.findMany()
     * 
     * // Get first 10 Hours
     * const hours = await prisma.hours.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hoursWithIdOnly = await prisma.hours.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends hoursFindManyArgs>(
      args?: SelectSubset<T, hoursFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<hours>>, PrismaPromise<Array<hoursGetPayload<T>>>>

    /**
     * Create a Hours.
     * @param {hoursCreateArgs} args - Arguments to create a Hours.
     * @example
     * // Create one Hours
     * const Hours = await prisma.hours.create({
     *   data: {
     *     // ... data to create a Hours
     *   }
     * })
     * 
    **/
    create<T extends hoursCreateArgs>(
      args: SelectSubset<T, hoursCreateArgs>
    ): CheckSelect<T, Prisma__hoursClient<hours>, Prisma__hoursClient<hoursGetPayload<T>>>

    /**
     * Delete a Hours.
     * @param {hoursDeleteArgs} args - Arguments to delete one Hours.
     * @example
     * // Delete one Hours
     * const Hours = await prisma.hours.delete({
     *   where: {
     *     // ... filter to delete one Hours
     *   }
     * })
     * 
    **/
    delete<T extends hoursDeleteArgs>(
      args: SelectSubset<T, hoursDeleteArgs>
    ): CheckSelect<T, Prisma__hoursClient<hours>, Prisma__hoursClient<hoursGetPayload<T>>>

    /**
     * Update one Hours.
     * @param {hoursUpdateArgs} args - Arguments to update one Hours.
     * @example
     * // Update one Hours
     * const hours = await prisma.hours.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends hoursUpdateArgs>(
      args: SelectSubset<T, hoursUpdateArgs>
    ): CheckSelect<T, Prisma__hoursClient<hours>, Prisma__hoursClient<hoursGetPayload<T>>>

    /**
     * Delete zero or more Hours.
     * @param {hoursDeleteManyArgs} args - Arguments to filter Hours to delete.
     * @example
     * // Delete a few Hours
     * const { count } = await prisma.hours.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends hoursDeleteManyArgs>(
      args?: SelectSubset<T, hoursDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hoursUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hours
     * const hours = await prisma.hours.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends hoursUpdateManyArgs>(
      args: SelectSubset<T, hoursUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Hours.
     * @param {hoursUpsertArgs} args - Arguments to update or create a Hours.
     * @example
     * // Update or create a Hours
     * const hours = await prisma.hours.upsert({
     *   create: {
     *     // ... data to create a Hours
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hours we want to update
     *   }
     * })
    **/
    upsert<T extends hoursUpsertArgs>(
      args: SelectSubset<T, hoursUpsertArgs>
    ): CheckSelect<T, Prisma__hoursClient<hours>, Prisma__hoursClient<hoursGetPayload<T>>>

    /**
     * Count the number of Hours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hoursCountArgs} args - Arguments to filter Hours to count.
     * @example
     * // Count the number of Hours
     * const count = await prisma.hours.count({
     *   where: {
     *     // ... the filter for the Hours we want to count
     *   }
     * })
    **/
    count<T extends hoursCountArgs>(
      args?: Subset<T, hoursCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HoursCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoursAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HoursAggregateArgs>(args: Subset<T, HoursAggregateArgs>): PrismaPromise<GetHoursAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for hours.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__hoursClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * hours findUnique
   */
  export type hoursFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
    /**
     * Throw an Error if a hours can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which hours to fetch.
    **/
    where: hoursWhereUniqueInput
  }


  /**
   * hours findFirst
   */
  export type hoursFindFirstArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
    /**
     * Throw an Error if a hours can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which hours to fetch.
    **/
    where?: hoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hours to fetch.
    **/
    orderBy?: Enumerable<hoursOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hours.
    **/
    cursor?: hoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hours from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hours.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hours.
    **/
    distinct?: Enumerable<HoursScalarFieldEnum>
  }


  /**
   * hours findMany
   */
  export type hoursFindManyArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
    /**
     * Filter, which hours to fetch.
    **/
    where?: hoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hours to fetch.
    **/
    orderBy?: Enumerable<hoursOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hours.
    **/
    cursor?: hoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hours from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hours.
    **/
    skip?: number
    distinct?: Enumerable<HoursScalarFieldEnum>
  }


  /**
   * hours create
   */
  export type hoursCreateArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
    /**
     * The data needed to create a hours.
    **/
    data: XOR<hoursCreateInput, hoursUncheckedCreateInput>
  }


  /**
   * hours update
   */
  export type hoursUpdateArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
    /**
     * The data needed to update a hours.
    **/
    data: XOR<hoursUpdateInput, hoursUncheckedUpdateInput>
    /**
     * Choose, which hours to update.
    **/
    where: hoursWhereUniqueInput
  }


  /**
   * hours updateMany
   */
  export type hoursUpdateManyArgs = {
    data: XOR<hoursUpdateManyMutationInput, hoursUncheckedUpdateManyInput>
    where?: hoursWhereInput
  }


  /**
   * hours upsert
   */
  export type hoursUpsertArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
    /**
     * The filter to search for the hours to update in case it exists.
    **/
    where: hoursWhereUniqueInput
    /**
     * In case the hours found by the `where` argument doesn't exist, create a new hours with this data.
    **/
    create: XOR<hoursCreateInput, hoursUncheckedCreateInput>
    /**
     * In case the hours was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<hoursUpdateInput, hoursUncheckedUpdateInput>
  }


  /**
   * hours delete
   */
  export type hoursDeleteArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
    /**
     * Filter which hours to delete.
    **/
    where: hoursWhereUniqueInput
  }


  /**
   * hours deleteMany
   */
  export type hoursDeleteManyArgs = {
    where?: hoursWhereInput
  }


  /**
   * hours without action
   */
  export type hoursArgs = {
    /**
     * Select specific fields to fetch from the hours
    **/
    select?: hoursSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CredentialScalarFieldEnum: {
    id: 'id',
    login: 'login',
    password: 'password',
    role: 'role',
    userId: 'userId'
  };

  export type CredentialScalarFieldEnum = (typeof CredentialScalarFieldEnum)[keyof typeof CredentialScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    id: 'id',
    jsonPlan: 'jsonPlan',
    gradeId: 'gradeId'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const LessonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    room: 'room'
  };

  export type LessonScalarFieldEnum = (typeof LessonScalarFieldEnum)[keyof typeof LessonScalarFieldEnum]


  export const HoursScalarFieldEnum: {
    id: 'id',
    from: 'from',
    to: 'to'
  };

  export type HoursScalarFieldEnum = (typeof HoursScalarFieldEnum)[keyof typeof HoursScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type credentialWhereInput = {
    AND?: Enumerable<credentialWhereInput>
    OR?: Enumerable<credentialWhereInput>
    NOT?: Enumerable<credentialWhereInput>
    id?: IntFilter | number
    login?: StringFilter | string
    password?: StringFilter | string
    role?: StringFilter | string
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type credentialOrderByInput = {
    id?: SortOrder
    login?: SortOrder
    password?: SortOrder
    role?: SortOrder
    userId?: SortOrder
  }

  export type credentialWhereUniqueInput = {
    id?: number
    login?: string
    userId?: number
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    credential?: XOR<CredentialRelationFilter, credentialWhereInput> | null
    grade?: GradeListRelationFilter
  }

  export type userOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type gradeWhereInput = {
    AND?: Enumerable<gradeWhereInput>
    OR?: Enumerable<gradeWhereInput>
    NOT?: Enumerable<gradeWhereInput>
    id?: IntFilter | number
    symbol?: StringFilter | string
    user?: UserListRelationFilter
    plan?: XOR<PlanRelationFilter, planWhereInput> | null
  }

  export type gradeOrderByInput = {
    id?: SortOrder
    symbol?: SortOrder
  }

  export type gradeWhereUniqueInput = {
    id?: number
  }

  export type planWhereInput = {
    AND?: Enumerable<planWhereInput>
    OR?: Enumerable<planWhereInput>
    NOT?: Enumerable<planWhereInput>
    id?: IntFilter | number
    grade?: XOR<GradeRelationFilter, gradeWhereInput>
    jsonPlan?: JsonFilter
    gradeId?: IntFilter | number
  }

  export type planOrderByInput = {
    id?: SortOrder
    jsonPlan?: SortOrder
    gradeId?: SortOrder
  }

  export type planWhereUniqueInput = {
    id?: number
  }

  export type lessonWhereInput = {
    AND?: Enumerable<lessonWhereInput>
    OR?: Enumerable<lessonWhereInput>
    NOT?: Enumerable<lessonWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    room?: StringFilter | string
  }

  export type lessonOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    room?: SortOrder
  }

  export type lessonWhereUniqueInput = {
    id?: number
  }

  export type hoursWhereInput = {
    AND?: Enumerable<hoursWhereInput>
    OR?: Enumerable<hoursWhereInput>
    NOT?: Enumerable<hoursWhereInput>
    id?: IntFilter | number
    from?: StringFilter | string
    to?: StringFilter | string
  }

  export type hoursOrderByInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
  }

  export type hoursWhereUniqueInput = {
    id?: number
  }

  export type credentialCreateInput = {
    login: string
    password: string
    role: string
    user: userCreateNestedOneWithoutCredentialInput
  }

  export type credentialUncheckedCreateInput = {
    id?: number
    login: string
    password: string
    role: string
    userId: number
  }

  export type credentialUpdateInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutCredentialInput
  }

  export type credentialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type credentialUpdateManyMutationInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type credentialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateInput = {
    name: string
    email: string
    credential?: credentialCreateNestedOneWithoutUserInput
    grade?: gradeCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    credential?: credentialUncheckedCreateNestedOneWithoutUserInput
  }

  export type userUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credential?: credentialUpdateOneWithoutUserInput
    grade?: gradeUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credential?: credentialUncheckedUpdateOneWithoutUserInput
  }

  export type userUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type gradeCreateInput = {
    symbol: string
    user?: userCreateNestedManyWithoutGradeInput
    plan?: planCreateNestedOneWithoutGradeInput
  }

  export type gradeUncheckedCreateInput = {
    id?: number
    symbol: string
    plan?: planUncheckedCreateNestedOneWithoutGradeInput
  }

  export type gradeUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    user?: userUpdateManyWithoutGradeInput
    plan?: planUpdateOneWithoutGradeInput
  }

  export type gradeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    plan?: planUncheckedUpdateOneWithoutGradeInput
  }

  export type gradeUpdateManyMutationInput = {
    symbol?: StringFieldUpdateOperationsInput | string
  }

  export type gradeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
  }

  export type planCreateInput = {
    jsonPlan: InputJsonValue
    grade: gradeCreateNestedOneWithoutPlanInput
  }

  export type planUncheckedCreateInput = {
    id?: number
    jsonPlan: InputJsonValue
    gradeId: number
  }

  export type planUpdateInput = {
    jsonPlan?: InputJsonValue
    grade?: gradeUpdateOneRequiredWithoutPlanInput
  }

  export type planUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jsonPlan?: InputJsonValue
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type planUpdateManyMutationInput = {
    jsonPlan?: InputJsonValue
  }

  export type planUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jsonPlan?: InputJsonValue
    gradeId?: IntFieldUpdateOperationsInput | number
  }

  export type lessonCreateInput = {
    name: string
    room: string
  }

  export type lessonUncheckedCreateInput = {
    id?: number
    name: string
    room: string
  }

  export type lessonUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
  }

  export type lessonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
  }

  export type lessonUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
  }

  export type lessonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    room?: StringFieldUpdateOperationsInput | string
  }

  export type hoursCreateInput = {
    from: string
    to: string
  }

  export type hoursUncheckedCreateInput = {
    id?: number
    from: string
    to: string
  }

  export type hoursUpdateInput = {
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
  }

  export type hoursUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
  }

  export type hoursUpdateManyMutationInput = {
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
  }

  export type hoursUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type CredentialRelationFilter = {
    is?: credentialWhereInput | null
    isNot?: credentialWhereInput | null
  }

  export type GradeListRelationFilter = {
    every?: gradeWhereInput
    some?: gradeWhereInput
    none?: gradeWhereInput
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type PlanRelationFilter = {
    is?: planWhereInput | null
    isNot?: planWhereInput | null
  }

  export type GradeRelationFilter = {
    is?: gradeWhereInput
    isNot?: gradeWhereInput
  }

  export type JsonFilter = {
    equals?: InputJsonValue
    not?: InputJsonValue
  }

  export type userCreateNestedOneWithoutCredentialInput = {
    create?: XOR<userCreateWithoutCredentialInput, userUncheckedCreateWithoutCredentialInput>
    connectOrCreate?: userCreateOrConnectWithoutCredentialInput
    connect?: userWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type userUpdateOneRequiredWithoutCredentialInput = {
    create?: XOR<userCreateWithoutCredentialInput, userUncheckedCreateWithoutCredentialInput>
    connectOrCreate?: userCreateOrConnectWithoutCredentialInput
    upsert?: userUpsertWithoutCredentialInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutCredentialInput, userUncheckedUpdateWithoutCredentialInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type credentialCreateNestedOneWithoutUserInput = {
    create?: XOR<credentialCreateWithoutUserInput, credentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: credentialCreateOrConnectWithoutUserInput
    connect?: credentialWhereUniqueInput
  }

  export type gradeCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<gradeCreateWithoutUserInput>, Enumerable<gradeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<gradeCreateOrConnectWithoutUserInput>
    connect?: Enumerable<gradeWhereUniqueInput>
  }

  export type credentialUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<credentialCreateWithoutUserInput, credentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: credentialCreateOrConnectWithoutUserInput
    connect?: credentialWhereUniqueInput
  }

  export type credentialUpdateOneWithoutUserInput = {
    create?: XOR<credentialCreateWithoutUserInput, credentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: credentialCreateOrConnectWithoutUserInput
    upsert?: credentialUpsertWithoutUserInput
    connect?: credentialWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<credentialUpdateWithoutUserInput, credentialUncheckedUpdateWithoutUserInput>
  }

  export type gradeUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<gradeCreateWithoutUserInput>, Enumerable<gradeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<gradeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<gradeUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<gradeWhereUniqueInput>
    set?: Enumerable<gradeWhereUniqueInput>
    disconnect?: Enumerable<gradeWhereUniqueInput>
    delete?: Enumerable<gradeWhereUniqueInput>
    update?: Enumerable<gradeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<gradeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<gradeScalarWhereInput>
  }

  export type credentialUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<credentialCreateWithoutUserInput, credentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: credentialCreateOrConnectWithoutUserInput
    upsert?: credentialUpsertWithoutUserInput
    connect?: credentialWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<credentialUpdateWithoutUserInput, credentialUncheckedUpdateWithoutUserInput>
  }

  export type userCreateNestedManyWithoutGradeInput = {
    create?: XOR<Enumerable<userCreateWithoutGradeInput>, Enumerable<userUncheckedCreateWithoutGradeInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutGradeInput>
    connect?: Enumerable<userWhereUniqueInput>
  }

  export type planCreateNestedOneWithoutGradeInput = {
    create?: XOR<planCreateWithoutGradeInput, planUncheckedCreateWithoutGradeInput>
    connectOrCreate?: planCreateOrConnectWithoutGradeInput
    connect?: planWhereUniqueInput
  }

  export type planUncheckedCreateNestedOneWithoutGradeInput = {
    create?: XOR<planCreateWithoutGradeInput, planUncheckedCreateWithoutGradeInput>
    connectOrCreate?: planCreateOrConnectWithoutGradeInput
    connect?: planWhereUniqueInput
  }

  export type userUpdateManyWithoutGradeInput = {
    create?: XOR<Enumerable<userCreateWithoutGradeInput>, Enumerable<userUncheckedCreateWithoutGradeInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutGradeInput>
    upsert?: Enumerable<userUpsertWithWhereUniqueWithoutGradeInput>
    connect?: Enumerable<userWhereUniqueInput>
    set?: Enumerable<userWhereUniqueInput>
    disconnect?: Enumerable<userWhereUniqueInput>
    delete?: Enumerable<userWhereUniqueInput>
    update?: Enumerable<userUpdateWithWhereUniqueWithoutGradeInput>
    updateMany?: Enumerable<userUpdateManyWithWhereWithoutGradeInput>
    deleteMany?: Enumerable<userScalarWhereInput>
  }

  export type planUpdateOneWithoutGradeInput = {
    create?: XOR<planCreateWithoutGradeInput, planUncheckedCreateWithoutGradeInput>
    connectOrCreate?: planCreateOrConnectWithoutGradeInput
    upsert?: planUpsertWithoutGradeInput
    connect?: planWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<planUpdateWithoutGradeInput, planUncheckedUpdateWithoutGradeInput>
  }

  export type planUncheckedUpdateOneWithoutGradeInput = {
    create?: XOR<planCreateWithoutGradeInput, planUncheckedCreateWithoutGradeInput>
    connectOrCreate?: planCreateOrConnectWithoutGradeInput
    upsert?: planUpsertWithoutGradeInput
    connect?: planWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<planUpdateWithoutGradeInput, planUncheckedUpdateWithoutGradeInput>
  }

  export type gradeCreateNestedOneWithoutPlanInput = {
    create?: XOR<gradeCreateWithoutPlanInput, gradeUncheckedCreateWithoutPlanInput>
    connectOrCreate?: gradeCreateOrConnectWithoutPlanInput
    connect?: gradeWhereUniqueInput
  }

  export type gradeUpdateOneRequiredWithoutPlanInput = {
    create?: XOR<gradeCreateWithoutPlanInput, gradeUncheckedCreateWithoutPlanInput>
    connectOrCreate?: gradeCreateOrConnectWithoutPlanInput
    upsert?: gradeUpsertWithoutPlanInput
    connect?: gradeWhereUniqueInput
    update?: XOR<gradeUpdateWithoutPlanInput, gradeUncheckedUpdateWithoutPlanInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type userCreateWithoutCredentialInput = {
    name: string
    email: string
    grade?: gradeCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCredentialInput = {
    id?: number
    name: string
    email: string
  }

  export type userCreateOrConnectWithoutCredentialInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCredentialInput, userUncheckedCreateWithoutCredentialInput>
  }

  export type userUpsertWithoutCredentialInput = {
    update: XOR<userUpdateWithoutCredentialInput, userUncheckedUpdateWithoutCredentialInput>
    create: XOR<userCreateWithoutCredentialInput, userUncheckedCreateWithoutCredentialInput>
  }

  export type userUpdateWithoutCredentialInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    grade?: gradeUpdateManyWithoutUserInput
  }

  export type userUncheckedUpdateWithoutCredentialInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type credentialCreateWithoutUserInput = {
    login: string
    password: string
    role: string
  }

  export type credentialUncheckedCreateWithoutUserInput = {
    id?: number
    login: string
    password: string
    role: string
  }

  export type credentialCreateOrConnectWithoutUserInput = {
    where: credentialWhereUniqueInput
    create: XOR<credentialCreateWithoutUserInput, credentialUncheckedCreateWithoutUserInput>
  }

  export type gradeCreateWithoutUserInput = {
    symbol: string
    plan?: planCreateNestedOneWithoutGradeInput
  }

  export type gradeUncheckedCreateWithoutUserInput = {
    id?: number
    symbol: string
    plan?: planUncheckedCreateNestedOneWithoutGradeInput
  }

  export type gradeCreateOrConnectWithoutUserInput = {
    where: gradeWhereUniqueInput
    create: XOR<gradeCreateWithoutUserInput, gradeUncheckedCreateWithoutUserInput>
  }

  export type credentialUpsertWithoutUserInput = {
    update: XOR<credentialUpdateWithoutUserInput, credentialUncheckedUpdateWithoutUserInput>
    create: XOR<credentialCreateWithoutUserInput, credentialUncheckedCreateWithoutUserInput>
  }

  export type credentialUpdateWithoutUserInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type credentialUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type gradeUpsertWithWhereUniqueWithoutUserInput = {
    where: gradeWhereUniqueInput
    update: XOR<gradeUpdateWithoutUserInput, gradeUncheckedUpdateWithoutUserInput>
    create: XOR<gradeCreateWithoutUserInput, gradeUncheckedCreateWithoutUserInput>
  }

  export type gradeUpdateWithWhereUniqueWithoutUserInput = {
    where: gradeWhereUniqueInput
    data: XOR<gradeUpdateWithoutUserInput, gradeUncheckedUpdateWithoutUserInput>
  }

  export type gradeUpdateManyWithWhereWithoutUserInput = {
    where: gradeScalarWhereInput
    data: XOR<gradeUpdateManyMutationInput, gradeUncheckedUpdateManyWithoutGradeInput>
  }

  export type gradeScalarWhereInput = {
    AND?: Enumerable<gradeScalarWhereInput>
    OR?: Enumerable<gradeScalarWhereInput>
    NOT?: Enumerable<gradeScalarWhereInput>
    id?: IntFilter | number
    symbol?: StringFilter | string
  }

  export type userCreateWithoutGradeInput = {
    name: string
    email: string
    credential?: credentialCreateNestedOneWithoutUserInput
  }

  export type userUncheckedCreateWithoutGradeInput = {
    id?: number
    name: string
    email: string
    credential?: credentialUncheckedCreateNestedOneWithoutUserInput
  }

  export type userCreateOrConnectWithoutGradeInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutGradeInput, userUncheckedCreateWithoutGradeInput>
  }

  export type planCreateWithoutGradeInput = {
    jsonPlan: InputJsonValue
  }

  export type planUncheckedCreateWithoutGradeInput = {
    id?: number
    jsonPlan: InputJsonValue
  }

  export type planCreateOrConnectWithoutGradeInput = {
    where: planWhereUniqueInput
    create: XOR<planCreateWithoutGradeInput, planUncheckedCreateWithoutGradeInput>
  }

  export type userUpsertWithWhereUniqueWithoutGradeInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutGradeInput, userUncheckedUpdateWithoutGradeInput>
    create: XOR<userCreateWithoutGradeInput, userUncheckedCreateWithoutGradeInput>
  }

  export type userUpdateWithWhereUniqueWithoutGradeInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutGradeInput, userUncheckedUpdateWithoutGradeInput>
  }

  export type userUpdateManyWithWhereWithoutGradeInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutUserInput>
  }

  export type userScalarWhereInput = {
    AND?: Enumerable<userScalarWhereInput>
    OR?: Enumerable<userScalarWhereInput>
    NOT?: Enumerable<userScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
  }

  export type planUpsertWithoutGradeInput = {
    update: XOR<planUpdateWithoutGradeInput, planUncheckedUpdateWithoutGradeInput>
    create: XOR<planCreateWithoutGradeInput, planUncheckedCreateWithoutGradeInput>
  }

  export type planUpdateWithoutGradeInput = {
    jsonPlan?: InputJsonValue
  }

  export type planUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jsonPlan?: InputJsonValue
  }

  export type gradeCreateWithoutPlanInput = {
    symbol: string
    user?: userCreateNestedManyWithoutGradeInput
  }

  export type gradeUncheckedCreateWithoutPlanInput = {
    id?: number
    symbol: string
  }

  export type gradeCreateOrConnectWithoutPlanInput = {
    where: gradeWhereUniqueInput
    create: XOR<gradeCreateWithoutPlanInput, gradeUncheckedCreateWithoutPlanInput>
  }

  export type gradeUpsertWithoutPlanInput = {
    update: XOR<gradeUpdateWithoutPlanInput, gradeUncheckedUpdateWithoutPlanInput>
    create: XOR<gradeCreateWithoutPlanInput, gradeUncheckedCreateWithoutPlanInput>
  }

  export type gradeUpdateWithoutPlanInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    user?: userUpdateManyWithoutGradeInput
  }

  export type gradeUncheckedUpdateWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
  }

  export type gradeUpdateWithoutUserInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    plan?: planUpdateOneWithoutGradeInput
  }

  export type gradeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
    plan?: planUncheckedUpdateOneWithoutGradeInput
  }

  export type gradeUncheckedUpdateManyWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    symbol?: StringFieldUpdateOperationsInput | string
  }

  export type userUpdateWithoutGradeInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credential?: credentialUpdateOneWithoutUserInput
  }

  export type userUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credential?: credentialUncheckedUpdateOneWithoutUserInput
  }

  export type userUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}